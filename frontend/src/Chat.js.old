import { useState, useRef, useEffect } from "react";
import ChatMessage from "./ChatMessage";

const API_BASE = process.env.REACT_APP_API_BASE || "";
export default function Chat({ userId = "anonymous" }) {
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState("");
  const [providers, setProviders] = useState([]);
  const [selectedProvider, setSelectedProvider] = useState("");
  const [selectedModel, setSelectedModel] = useState("");
  const chatEndRef = useRef(null);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    chatEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages, loading]);

  // Load providers from /api/models
  useEffect(() => {
    fetch(`${API_BASE}/api/models`)
      .then(res => res.json())
      .then(data => {
        const provs = data.providers;
        setProviders(provs);
        if (provs.length > 0) {
          setSelectedProvider(provs[0].id);
          setSelectedModel(provs[0].default_model);
        }
      });
  }, []);

  const sendMessage = async () => {
    if (!input.trim()) return;

    setMessages(prev => [...prev, { text: input, isUser: true }]);
    setInput("");
    setLoading(true);

    try {
      const res = await fetch(`"${API_BASE}/api/chat`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          provider: selectedProvider,
          model: selectedModel,
          message: input,
          user_id: userId
        })
      });

      if (!res.body) throw new Error("Streaming not supported");

      const reader = res.body.getReader();
      const decoder = new TextDecoder();
      let botReply = "";

      while (true) {
        const { done, value } = await reader.read();
        if (done) break;

        botReply += decoder.decode(value, { stream: true });

        setMessages(prev => {
          const lastMessage = prev[prev.length - 1];
          if (lastMessage?.isUser === false) {
            return [...prev.slice(0, -1), { ...lastMessage, text: botReply }];
          } else {
            return [...prev, { text: botReply, isUser: false }];
          }
        });
      }

      setLoading(false);
    } catch (err) {
      setMessages(prev => [...prev, { text: `Error: ${err.message}`, isUser: false }]);
      setLoading(false);
    }
  };

  const handleKeyDown = e => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  return (
    <div className="flex flex-col h-full p-4 border rounded shadow-lg bg-white">
      <div className="flex mb-2 space-x-2">
        <select
          value={selectedProvider}
          onChange={e => {
            const prov = providers.find(p => p.id === e.target.value);
            setSelectedProvider(e.target.value);
            setSelectedModel(prov?.default_model || "");
          }}
          className="p-2 border rounded"
        >
          {providers.map(p => (
            <option key={p.id} value={p.id}>{p.name}</option>
          ))}
        </select>

        <select
          value={selectedModel}
          onChange={e => setSelectedModel(e.target.value)}
          className="p-2 border rounded"
        >
          {providers.find(p => p.id === selectedProvider)?.models.map(m => (
            <option key={m.id} value={m.id}>{m.id}</option>
          ))}
        </select>
      </div>

      <div className="flex-1 overflow-y-auto mb-4">
        {messages.map((m, i) => <ChatMessage key={i} {...m} />)}
        {loading && <div className="text-gray-400">...</div>}
        <div ref={chatEndRef} />
      </div>

      <div className="flex">
        <textarea
          className="flex-1 p-2 border rounded resize-none"
          rows={1}
          value={input}
          onChange={e => setInput(e.target.value)}
          onKeyDown={handleKeyDown}
          placeholder="Type your message..."
        />
        <button
          className="ml-2 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
          onClick={sendMessage}
        >
          Send
        </button>
      </div>
    </div>
  );
}

